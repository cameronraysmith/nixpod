name: "CI"
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the workflow with tmate.io debugging enabled"
        required: true
        type: boolean
        default: false
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, reopened, synchronize ]

jobs:
  scanning:
    name: GitGuardian scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history so multiple commits can be scanned
      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1.18.1
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA:  ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  nix:
    needs: scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: 'system-features = nixos-test benchmark big-parallel kvm'
      # - name: Run the Magic Nix Cache
      #   uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: cachix/cachix-action@v12
        with:
          name: srid
      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ inputs.debug_enabled }}
      - name: Build
        run: |
          nix run github:srid/nixci

  images:
    needs: nix
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          # - dockerfile_path: "containers/Dockerfile"
          #   image_suffix: ""
          - dockerfile_path: "testing/Dockerfile"
            image_suffix: "-testing"
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}${{ matrix.image_suffix }}
        
    steps:
      - name: "Print github context"
        run: |
          echo "      EVENT_NAME:" "$GITHUB_EVENT_NAME"
          echo "             REF:" "$GITHUB_REF"
          echo "       full_name: ${{ github.event.repository.full_name }}"
          echo "      repository: ${{ github.repository }}"
          echo "repository_owner: ${{ github.repository_owner }}"
          echo "  default_branch: ${{ github.event.repository.default_branch }}"
          echo "REPOSITORY_OWNER:" "$GITHUB_REPOSITORY_OWNER"
          echo "        REF_NAME:" "$GITHUB_REF_NAME"
          echo "        HEAD_REF:" "$GITHUB_HEAD_REF"
          echo "        BASE_REF:" "$GITHUB_BASE_REF"
          echo "             SHA:" "$GITHUB_SHA"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract github metadata for docker labels
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=,format=long
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./${{ matrix.dockerfile_path }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
